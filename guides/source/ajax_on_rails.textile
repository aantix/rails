h2. AJAX on Rails

This guide covers the built-in Ajax/JavaScript functionality of Rails (and
more); it will enable you to create rich and dynamic AJAX applications with
ease! We will cover the following topics:

* Quick introduction to AJAX and related technologies
* rails.js, "Unobtrusive Javascript" and various adapters
* Helper functions that Rails provides
* Testing JavaScript functionality
* Developing Single Page Applications with Rails

endprologue.

h3. An introdocution to AJAX

h3. rails.js and "Unobtrusive Javascript"

Rails 3 introduced major changes in the way that Rails applications utilized
Javascript. Of course, the asset pipeline helped improve the way we organize
and serve Javascript code, but there was another major innovation: UJS.

h4. Simple Example

Image you have a series of users that you would like to display and provide a form on that same page
to create a new user.  The index action of your controller looks like this :

<ruby>
class UsersController < ApplicationController
  def index
    @users = User.all
    @user = User.new
  end
  # .......
</ruby>

The index view ( app/views/users/index.html.erb ) contains :

<ruby>
<b>Users</b>

<ul id="users">
<% @users.each do |user| %>
    <%= render user %>
<% end %>
</ul>

<br />

<%= form_for(@user, :remote => true) do |f| %>
  <%= f.label :name %><br />
  <%= f.text_field :name %>
  <%= f.submit %>
<% end %>
</ruby>

The app/views/users/_user.html.erb partial contains the following :

<ruby>
<li><%=  user.name %></li>
</ruby>

The top portion of the index page displays the users, the bottom portion provides a form to create a new user.

The bottom form will call the create action on the Users controller.  Because the form's remote option is set to true,
the request will be posted to the users controller as a js (javascript) request.  In order to service that request, the create
action of your controller would look like this :

<ruby>
  # app/controllers/users_controller.rb
  # ......
  def create
    @user = User.new(params[:user])

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.js{}
        format.json { render json: @user, status: :created, location: @user }
      else
        format.html { render action: "new" }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end
</ruby>

Notice the format.js in the respond_to block; that allows the controller to respond to your remote (ajax) request.
You then have a corresponding app/views/users/create.js.erb view file that generates the actual Javascript code that
will be sent and executed on the client side.

<ruby>
$("<%= escape_javascript(render @user) %>").appendTo("#users");
</ruby>

h4. "Unobtrusive Javascript"

h4. rails.js

+rails.js+ is a file that any UJS adapter should implement. It defines the
Javascript half of the AJAX interactions that go with the HTML attributes
that Rails' helpers generate.

h4. jquery-ujs

The default rails.js adapter uses jQuery. Known as "jquery-ujs":https://github.com/rails/jquery-ujs,
it implements all of the rails.js methods using the jQuery library.

If you're using jQuery in the rest of your application, choosing this adapter
will allow you to not include two separate Javascript libraries for Rails'
helpers and your application.

h4. prototype-ujs

Previous versions of Rails used the Prototype Javascript library heavily, and
some still prefer Prototype to jQuery. If you'd prefer to use Prototype as
your backend, you can use the "prototype-ujs adapter":https://github.com/rails/prototype-ujs instead.

If you're using Prototype in the rest of your application, choosing this adapter
will allow you to not include two separate Javascript libraries for Rails'
helpers and your application.

h3. Built-in Rails Helpers

h4. form_for

+form_for+ lets you...

h4. form_tag

+form_tag+ lets you...

h4. link_to

+link_to+ lets you...

h4. button_to

+buton_to+ lets you...

h3. Testing JavaScript

h4. Unit tests

h5. Jasmine

h5. QUnit

h5. Mocha

h4. Integration and Acceptance tests

h5. Selenium

h5. Capybara

h5. Cucumber

h5. Phantom.js

h5. Zombie.js

h3. Developing SPAs with Rails

As sites became more and more AJAX heavy, people eventually turned it up to 11
and created sites that are almost entirely AJAX. Because they only load one
initial HTML page, they became known as Single Page Applications. If you
find yourself writing a large amount of AJAX, Rails' defaults may not be
enough.

There are many different frameworks for building these kinds of sites, and
it's a fairly new strategy in general. This means that there are a lot of
frameworks battling it out for marketshare. With that said, there are two that
are favored by the largest number of Rails developers: Ember and Backbone.js.

h5. Ember

Ember was created by Rails Core member Yehuda Katz. "The Ember homepage":http://emberjs.com/
describes Ember as "a framework for creating ambitious web applications".
"Applications" is a good word, as Ember is well-suited for developing complex,
heavy applications, and is a bit verbose for sites that just need a smattering
of Javascript.

Ember is similar to Rails in that it is 'full-stack,' and provides you with
many conventions so that you don't need to do a lot of configuration.

h5. Backbone.js

"Backbone.js":http://backbonejs.org/ was created by Jeremy Ashkenas, and is a
very lightweight framework. Backbone "gives structure to web applications,"
which makes it a great choice for apps that are starting to devolve into
'callback spaghetti,' or that only need light amounts of interactivity.

That doesn't mean that you can't build large applications with Backbone, and
"DocumentCloud":http://www.documentcloud.org/, the company that Jeremy
extracted Backbone from has done just that. Like Sinatra, building large apps
with Backbone gives you a large degree of freedom to build exactly what you
want.

h5. Throne of JS

Since SPAs are a very hot topic, there are many competing frameworks. Recently,
a conference called "Throne of JS" was held in Toronto. Covering seven
different Javascript frameworks, the conference focused on bringing the
creators of all of them together to discuss their strengths and weaknesses.

While "the offical site":http://throneofjs.com/ is a bit light, the videos
will all eventually be posted "on InfoQ":http://www.infoq.com/throne_of_js/
Keep checking back as they add more.

h3. Other resources

Here are some helpful links to help you learn even more:

* "jquery-ujs wiki":https://github.com/rails/jquery-ujs/wiki
* "jquery-ujs list of external articles":https://github.com/rails/jquery-ujs/wiki/External-articles
* "Rails 3 Remote Links and Forms: A Definitive Guide":http://www.alfajango.com/blog/rails-3-remote-links-and-forms/
* "Railscasts: Testing JavaScript with Jasmine":http://railscasts.com/episodes/261-testing-javascript-with-jasmine
* "Railscasts: Unobtrusive Javascript":http://railscasts.com/episodes/205-unobtrusive-javascript
* "Railscasts: Testing JavaScript with Jasmine":http://railscasts.com/episodes/261-testing-javascript-with-jasmine
* "Railscasts: Request Specs and Capybara":http://railscasts.com/episodes/257-request-specs-and-capybara
